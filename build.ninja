# Build configuration for zz project
# This is a standalone Ninja build file

# Variables
cxx = g++
outdir = build
target = zz
sources = src/main.cpp src/parsing.cpp src/printer.cpp
objects = $outdir/main.o $outdir/parsing.o $outdir/printer.o
target_path = $outdir/$target

# Default build flags
cxxflags = -std=c++23 -Wall -Wextra -Wpedantic -O2
debugflags = -g -O0 -DDEBUG

# Rules
rule compile
  command = $cxx $cxxflags -c $in -o $out
  description = Compiling $out

rule link
  command = $cxx $cxxflags -o $out $in
  description = Linking $out

rule clean
  command = rm -rf $outdir
  description = Cleaning build artifacts

rule test
  command = ./$in -r 2 --no-icons
  description = Running tests

rule run
  command = ./$in
  description = Running program

rule makedir
  command = mkdir -p $out
  description = Creating directory $out

# Build directory creation
build $outdir: makedir
  description = Creating build directory

# Build targets
build $outdir/main.o: compile src/main.cpp
build $outdir/parsing.o: compile src/parsing.cpp
build $outdir/printer.o: compile src/printer.cpp
build $target_path: link $outdir/main.o $outdir/parsing.o $outdir/printer.o
  description = Building $target

# Debug build targets
build $outdir/main_debug.o: compile src/main.cpp
  cxxflags = $cxxflags $debugflags
build $outdir/parsing_debug.o: compile src/parsing.cpp
  cxxflags = $cxxflags $debugflags
build $outdir/printer_debug.o: compile src/printer.cpp
  cxxflags = $cxxflags $debugflags
build $outdir/debug_$target: link $outdir/main_debug.o $outdir/parsing_debug.o $outdir/printer_debug.o
  cxxflags = $cxxflags $debugflags
  description = Building debug version

# Debug phony target
build debug: phony $outdir/debug_$target

# Test target
build test: test $target_path
  description = Running tests for $target

# Clean target
build clean: clean

# Run target
build run: run $target_path
  description = Running $target

# Default target
default $target_path

# Phony targets
build all: phony $target_path
build debug_build: phony $outdir/debug_$target
build tests: phony test
build cleanup: phony clean
build runner: phony run
